
Логгер на C++
Поддерживает вызовы из C, но для самого логгера должен быть C++ компилятор - нужно обязательно подключить модуль logger.cpp
Если логгирование только из C++ - logger.cpp можно не подключать, нужен только logger.h, и в одном из cpp модулей указать DEFINE_LOGGER;


---------------------------------------------------------------------
Что умеет

- быстрое логгирование (кэширует обработку заголовков)
- определение имени DLL, из которой вызвана функция
- вывод списка подключенных DLL с информацией о версии файлов
- запись в лог информацию об ОС
- вывод stack trace, работа с символами pdb при выводе stack trace - если удалось загрузить,
  записывает имя фукции, исходного файла, строку
- создание дамп файла при падении приложения и сохранение информации о падении (стектрейса и т.д.)
- конфигурация из реестра
- конфигурация из ini файла
- конфигурация из кода
- поддержка макросов при конфигурации
- поддержка несколько экземпляров логгера из разных модулей (если EXE и DLL файлы используют каждый свой логгер)
- скроллирование лог файла по размеру файла, скроллирование при каждом запуске, ограничение количества файлов
- поддержка x86 и x64

---------------------------------------------------------------------
Особенности:
- дампы создаются там же где и логи
- если используется механизм shared logger (один логгер для всех модулей), то используется
  конфигурация первого инициализированного модуля
- pdb загружаются из текущей директории процесса, директории с файлом процесса, из (exedir)\pdb,
  из директории, куда сохраняются логи, из (logdir)\pdb

---------------------------------------------------------------------
по умолчанию:
- ищет конфигурационный файл логгера в (currentdir)\(processname).log.ini, (processdir)\(processname).log.ini,
  (moduledir)\(modulename).log.ini

- пытается настроиться из реестра HKCU\Software\(processname)\Logging

---------------------------------------------------------------------

Настройка из ini файла

пример:

[logger]
LogPath=C:\Logs\ | $(SYSTEMPATH) | $(WINDOWSPATH) | $(COMMONAPPDATA) | $(USERAPPDATA) | $(DESKTOPDIR) | $(TEMPPATH) | $(CURRENTDIR) | $(EXEDIR) | $(EXEFILENAME) | $(EXEFULLFILENAME) | $(MODULEDIR) | $(MODULEFILENAME) | $(MODULEFULLFILENAME)
Verbose=255
HeaderFormat=$(V)|$(dd).$(MM).$(yyyy)|$(hh):$(mm):$(ss).$(ttt) ($(module)!$(function))  
LogFileName=log.log
LogSysInfo=1
ScrollFileCount=5
ScrollFileSize=16384
RegistryConfigPath=


---------------------------------------------------------------------
Настройка из кода

// по умолчанию разрешить все сообщения
LOG_SET_VERBOSE_LEVEL(LOGGER_VERBOSE_ALL);

// разрешить логгеру брать конфигурацию из реестра
LOG_SET_REG_CONFIG_PATH("HKCU\\Software\\Logtest");
LOG_SET_INI_CONFIG_PATHS("asdf");


---------------------------------------------------------------------


Варианты использования в проекте

Выбор варианта зависит от:
- использование логгера в pureC коде в проектах CPP + pureC
- использование логгера в pureC проектах, где вообще не используется C++ компилятор
- вариантов изначальной конфигурации логгера (через хидер logger.h, через директивы препроцессора в компиляторе, через внешний header файл)
- необходимости переконфигурации логгера в рантайме


1. минимальный - только logger.h
Самый простой способ - не требует подключения дополнительных CPP и C файлов, используется только один хидер.

Возможно только при использовании логгера в C++ (pureC не поддерживается). Не требует внешних DLL. Настройка параметров - через дефайны в заголовке файла logger.h
Во всех файлах, которые используют логгер, нужно #include "logger.h"
В одном CPP (именно cpp, не c) файле нужно в секции глобальных переменных указать:
DEFINE_LOGGER

Возможна конфигурация из кода в рантайме

2. logger.h + logger.cpp
Возможно использование логгера в C++ и C файлах. Не требует внешних DLL. Настройка параметров - через дефайны в заголовке файла logger.h
Во всех файлах, которые используют логгер, нужно #include "logger.h". Нужно также подключить в проект файл logger.cpp
Для компиляции logger.cpp нужен C++ компилятор, поэтому в проектах, где только pureC, такой вариант не годится

Возможна конфигурация из кода в рантайме, но только в CPP файлах

3. logger.h + loggerdll.c + DLL
Возможно использование логгера в C++ и C файлах, включая pureC проекты, где вообще нет C++. Требуется DLLка loggerdll.dll рядом. Важно: разрядность проекта и loggerdll.dll должны совпадать
Если ее не будет - логгер работать не будет, но работоспособность проекта сохранится.
Нужно: Во всех файлах, которые используют логгер, нужно #include "logger.h". Нужно также подключить в проект файл loggerdll.c
Задать дефайн LOG_USE_DLL=1 в свойствах проекта (через компилятор), либо в заголовке logger.h
Рядом с exe файлом должна лежать loggerdll.dll (в линуксе - libloggerdll.so)

Конфигурация из кода в рантайме невозможна


4. logger.h + loggerlib.lib (в проекте нет)
Возможно использование логгера в C++ и C файлах, включая pureC проекты, где вообще нет C++. Не требует внешней DLL
Требуется использование того lib файла, который совместим с используемым компилятором



---------------------------------------------------------------------


Настройки


