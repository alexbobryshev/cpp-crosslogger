
Логгер на C++
Поддерживает вызовы из C, но сам код логгера на C++ 11 - нужно обязательно подключить модуль logger.cpp
Если логгирование из C не планируется (только из C++) - logger.cpp подключать не обязательно, необходим только logger.h, и в одном из cpp модулей кода приложения указать DEFINE_LOGGER;

---------------------------------------------------------------------
Что умеет

- поддержка Windows, linux, macos, android, cygwin. Архитектуры x86, amd64, armv7, arm64
- поддержка многопоточности во всех ОС
- конфигурация из ini файла, из программного кода, для Windows - из реестра
- быстрое логгирование (кэширует обработку заголовков)
- определение имени DLL (Windows) или SO (Linux), из которой вызвана функция
- вывод списка всех загруженных DLL в лог с информацией о версии файлов
- запись в лог информации об ОС: тип ОС, архитектура, количество свободной памяти, имя текущего пользователя
- вывод stack trace в windows/linux, Windows - работа с символами pdb при выводе stack trace - если удалось загрузить pdb,
  записывает имя фукции, исходного файла, строку. В linux информация берется из отладочных данных модуля, если модуль собран с ними
- создание дамп файла при падении приложения и сохранение информации о падении (стектрейса и т.д.)
- поддержка макросов при конфигурации и формате заголовка логов
- регистрация экземпляра логгера в shared memory: если используется несколько модулей с логгером, используется фактически только один логгер
- скроллирование лог файла по размеру файла, при каждом запуске, ограничение количества файлов
- работа логгера из отдельной DLL/SO: при старте приложения предпринимается попытка загрузки DLL/SO логгера, если ее нет - логи не пишутся
- независимость от версий логгера из DLL/SO. При обновлении логгера все приложения, собранные со старой версией, смогут работать с новой, и наоборот
- сборка компиляторами Visual C++, gcc (linux/android/cygwin), clang (linux/android/macos/cygwin). Настройка сборки для Visual Studio, qmake
- Android: логгирование в файл, либо ADB log. При логгировании в файл по умолчанию логи пишутся в /data/local/tmp (настраивается)

---------------------------------------------------------------------
Особенности:
- в Windows дампы создаются в той же директории, где и логи
- если используется механизм shared logger (один логгер для всех модулей через shared memory), то будет использоваться
  конфигурация первого инициализированного модуля
- в Windows pdb загружаются из текущей директории процесса, директории с файлом процесса, из (exedir)\pdb,
  из директории, куда сохраняются логи, из (logdir)\pdb
  Например, если путь к процессу D:\Program\Test\testapp.exe, а в настройках логгера указана директория для вывода логов D:\Logs\TestLog, 
  то будут предприняты попытки загрузить PDB из директорий:
    <текущая директоря процесса, полученная GetCurrentDir>
    D:\Program\Test
    D:\Program\Test\pdb
    D:\Logs\TestLog
    D:\Logs\TestLog\pdb

---------------------------------------------------------------------
по умолчанию:
- ищет конфигурационный файл логгера в (currentdir)\(processname).log.ini, (processdir)\(processname).log.ini,
  (moduledir)\(modulename).log.ini
  Например, приложение testapp.exe конфигурируется файлом testapp.log.ini

- пытается настроиться из реестра HKCU\Software\(processname)\Logging
  Пример: приложение testapp.exe конфигурируется из ветки HKCU\Software\testapp\Logging

---------------------------------------------------------------------

Настройка из ini файла

пример:

[logger]
LogPath=C:\Logs\ | $(SYSTEMPATH) | $(WINDOWSPATH) | $(COMMONAPPDATA) | $(USERAPPDATA) | $(DESKTOPDIR) | $(TEMPPATH) | $(CURRENTDIR) | $(EXEDIR) | $(EXEFILENAME) | $(EXEFULLFILENAME) | $(MODULEDIR) | $(MODULEFILENAME) | $(MODULEFULLFILENAME)
Verbose=255
HeaderFormat=$(V)|$(dd).$(MM).$(yyyy)|$(hh):$(mm):$(ss).$(ttt) ($(module)!$(function))  
LogFileName=log.log
LogSysInfo=1
ScrollFileCount=5
ScrollFileSize=16384
RegistryConfigPath=


---------------------------------------------------------------------
Настройка из кода

// по умолчанию разрешить все сообщения
LOG_SET_VERBOSE_LEVEL(LOGGER_VERBOSE_ALL);

// разрешить логгеру брать конфигурацию из реестра
LOG_SET_REG_CONFIG_PATH("HKCU\\Software\\Logtest");
LOG_SET_INI_CONFIG_PATHS("asdf");


---------------------------------------------------------------------


Варианты использования в проекте

Выбор варианта зависит от:
- использование логгера в pureC коде в проектах CPP + pureC
- использование логгера в pureC проектах, где вообще не используется C++ компилятор
- вариантов изначальной конфигурации логгера (через хидер logger.h, через директивы препроцессора в компиляторе, через внешний header файл)
- необходимости переконфигурации логгера в рантайме


1. минимальный - только logger.h
Самый простой способ - не требует подключения дополнительных CPP и C файлов, используется только один хидер.

Возможно только при использовании логгера в C++ (pureC не поддерживается). Не требует внешних DLL. Настройка параметров - через дефайны в заголовке файла logger.h
Во всех файлах, которые используют логгер, нужно #include "logger.h"
В одном CPP (именно cpp, не c) файле нужно в секции глобальных переменных указать:
DEFINE_LOGGER

Возможна конфигурация из кода в рантайме

2. logger.h + logger.cpp
Возможно использование логгера в C++ и C файлах. Не требует внешних DLL. Настройка параметров - через дефайны в заголовке файла logger.h
Во всех файлах, которые используют логгер, нужно #include "logger.h". Нужно также подключить в проект файл logger.cpp
Для компиляции logger.cpp нужен C++ компилятор, поэтому в проектах, где только pureC, такой вариант не годится

Возможна конфигурация из кода в рантайме, но только в CPP файлах

3. logger.h + loggerdll.c + DLL
Возможно использование логгера в C++ и C файлах, включая pureC проекты, где вообще нет C++. Требуется DLLка loggerdll.dll рядом. Важно: разрядность проекта и loggerdll.dll должны совпадать
Если ее не будет - логгер работать не будет, но работоспособность проекта сохранится.
Нужно: Во всех файлах, которые используют логгер, нужно #include "logger.h". Нужно также подключить в проект файл loggerdll.c
Задать дефайн LOG_USE_DLL=1 в свойствах проекта (через компилятор), либо в заголовке logger.h
Рядом с exe файлом должна лежать loggerdll.dll (в линуксе - libloggerdll.so)

Конфигурация из кода в рантайме невозможна


4. logger.h + loggerlib.lib (в проекте нет)
Возможно использование логгера в C++ и C файлах, включая pureC проекты, где вообще нет C++. Не требует внешней DLL
Требуется использование того lib файла, который совместим с используемым компилятором



---------------------------------------------------------------------


Настройки


